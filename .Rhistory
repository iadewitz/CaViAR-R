y_ar <- arima.sim(model = list(ar = 0.75, ma = 0),
n = 1000)
acf(y_ar)
pacf(y_ar)
y_ar <- arima.sim(model = list(ar = c(0.75, 0.28), ma = 0),
n = 1000)
y_ar <- arima.sim(model = list(ar = c(0.75, 0.12), ma = 0),
n = 1000)
acf(y_ar)
pacfc(y_ar)
pacf(y_ar)
set.seed(123)
y_ma <- arima.sim(model = list(ar = 0, ma = 0.76),
n = 1000)
acf(y_ma)
pacf(y_ma)
acf(y_ma)
acf(y_ar)
pacf(y_ar)
install.packages(c("googlesheets4", "xfun"))
install.packages("rmarkdown")
library(xgboost)
?xgb.train
library(catboost)
library(lightgbm)
library(xgboost)
install.packages("gam")
library(gbm)
?gbm::gbm
library(lightgbm)
?lightgbm::lgb.train
install.packages("ellipse")
70*(5/4)
1/(70*(5/4))
1/2 + 1/3
5/6
k <- ln(50) + ln(200/3)
k
k <- log(50) + log(200/3)
k
k + log(6) - log(2/3) + log(3)
(k + log(6) - log(2/3) + log(3))/2
exp((k + log(6) - log(2/3) + log(3))/2)
k <- log(25) + log(200/3)
k
exp((k + log(6) - log(2/3) + log(3))/2)
X = 212.132/6
Y = (2/3)*(212.132/3)
X
Y
X*Y^2
log(X*Y^2)
k
log(X*(Y^2))
k <- log(25) + 2*log(200/3)
k
exp((k + log(6) - log(2/3) + log(3))/2)
X = 1732.051/6
Y = (2/3)*(1732.051/3)
log(X*(Y^2))
k
50*((200/3)^2)
(50*((200/3)^2))
((50*((200/3)^2))*(6*9*9))/4
(((50*((200/3)^2))*(6*9*9))/4)^1/3
((((50*((200/3)^2))*(6*9*9))/4))^1/3
20000000^(1/2)
20000000^(1/3)
((((50*((200/3)^2))*(6*9*9))/4))^(1/3)
((((50*((200/3)^2))*(8*9*9))/4))^(1/3)
((((50*((200/3)^2))*(12*9*9))/4))^(1/3)
X = 377.9763/12
X
Y = (2/3)*(377.9763/3)
Y
X*4 + Y*3
X*Y^2
50 - 5
50 - X
X - 25
X - 50
1.05*800
(1.05*800) + 2100
4/((1.05*800) + 2100)
2940/2
1470*2
1470*2/1.05
1470/1.05
library(lightgbm)
install.packages(c("ggplot2", "prodlim", "ps"))
# Gradient Boosting Machines -----------------------------------------------
library(gbm)
library(gbm)
install.packages(c("Matrix", "quantmod"))
install.packages(c("ellipse", "quantmod", "RcppArmadillo"))
install.packages("igraph")
install.packages("quantreg")
install.packages("zoo")
library(xgboost)
?xgb.train
install.packages(c("gargle", "xts"))
800*1.05 + 2100
2940/1.05
install.packages(c("vctrs", "xfun"))
install.packages("dplyr")
install.packages("MASS")
install.packages(c("fs", "lme4", "recipes"))
2 + 2
library(igraph)
install.packages("xml2")
4*(5^3) + 2*(5^2) + 10*5 + 5
605/5
100 - 20*15 + 15^2
4*(5^3) + 2*(5^2) + 10*5 + 5
(4*(5^3) + 2*(5^2) + 10*5 + 5 )/5
rnorm
y <- rnorm(1000)
quantile(y, seq(0.2, 1, length = 5))
y[y < quantile(y, seq(0.2, 1, length = 5))[1]]
H <- mean(y[y < quantile(y, seq(0.2, 1, length = 5))[1]])
sum(y > H)
x1 <- rnorm(1000, 0, 1)
x2 <- x1 + rnorm(1000, 0, 0.5)
y <- x1 + x2 + rnorm(1000, 0, 3)
summary(lm(y ~ x1 + x2))
cor(x1. x2)
cor(x1, x2)
x2 <- rnorm(1000, 0, 0.5)
y <- x1 + x2 + rnorm(1000, 0, 3)
summary(lm(y ~ x1 + x2))
660*10.15
660*0.15
install.packages(c("microbenchmark", "rlang", "vroom"))
install.packages(c("cachem", "waldo"))
install.packages(c("chron", "class", "later", "MASS", "profvis", "sass", "testthat", "tseries", "viridis", "viridisLite"))
install.packages(c("evaluate", "tseries"))
install.packages("tseries")
install.packages("clock")
install.packages("future.apply")
install.packages(c("igraph", "sys"))
n <- 500
x1 <- rnorm(n)
x2 <- 2*x1 + 0.5 + rnorm(n)
y <- x1 + x2 + rnorm(n)
lm(y ~ x1 + x2)
summary(lm(y ~ x1 + x2))
plogis(x1, x2)
plot(x1, x2)
summary(lm(y ~ x1 + x2))
y <- x1 + rnorm(n)
summary(lm(y ~ x1 + x2))
y
install.packages(c("knitr", "statnet.common", "timeSeries"))
install.packages("RcppArmadillo")
install.packages("ergm")
install.packages("rmarkdown")
install.packages("mvtnorm")
install.packages("jsonlite")
install.packages("usethis")
install.packages("curl")
install.packages(c("curl", "mvtnorm"))
install.packages(c("broom", "bslib", "DEoptimR"))
install.packages(c("gargle", "googlesheets4"))
install.packages("googledrive")
4*sqrt(20)*sqrt(80)
((3/8)*(222222.2))^(2/3)
((3/8)*(222222.2)^(1/2))^(2/3)
4/3*2*31.49
4/3*2*31.49803
4/3*2*31.5
install.packages(c("bvartools", "gss", "igraph", "pkgbuild", "quantmod", "RcppArmadillo", "robustbase", "testthat", "vctrs"))
2
cumprod(c(1, 1 - 0.2163))
cumprod(c(1, 1 - 0.2163), 1 + 0.2374)
cumprod(c(1, 1 - 0.2163), 1 + 0.2374))
cumprod(c(1, 1 - 0.2163, 1 + 0.2374))
hedge <- c(0,
-21.63,
23.74,
10.88,
-5.48,
8.25,
11.12,
2.88,
0.04,
6.10)
hedge
1 + hedge
cumprod(1 + hedge)
hedge/100
1 + hedge/100
cumprod(1 + hedge/100)
100*cumprod(1 + hedge/100)
?mean
sp500 <- c(0,)
sp500 <- c(0,
-37,
26.46,
15.06,
2.11,
16,
32.39,
13.39,
1.38,
11.96)
sp500
100*cumprod(1 + sp500/100)
(1 + 0.3349)^(1/9) - 1
(1 + 0.03261576)^9
(1 + 0.85)^(1/9) - 1
plot(seq(0, 9))
plot(seq(0, 9), 100*cumprod(1 + sp500/100))
points(seq(0, 9), 100*cumprod(1 + hedge/100))
points(seq(0, 9), 100*cumprod(1 + hedge/100), col = 'red', type = 'l')
plot(seq(0, 9), 100*cumprod(1 + sp500/100), ylab = 'l', type = 'l')
points(seq(0, 9), 100*cumprod(1 + hedge/100), col = 'red', type = 'l')
plot(seq(0, 9), 100*cumprod(1 + sp500/100), ylab = '', type = 'l')
points(seq(0, 9), 100*cumprod(1 + hedge/100), col = 'red', type = 'l')
plot(seq(0, 9), 100*cumprod(1 + sp500/100), ylab = '', type = 'l', xlab = seq(2008, 2016, by = 1))
plot(seq(2008, 2016, by = 1), 100*cumprod(1 + sp500/100), ylab = '', type = 'l')
seq(2008, 2016, by = 1)
c('t0', seq(2008, 2016, by = 1))
plot(c(2008, seq(2008, 2016, by = 1), 100*cumprod(1 + sp500/100), ylab = '', type = 'l')
)
plot(c(2008, seq(2008, 2016, by = 1)), 100*cumprod(1 + sp500/100), ylab = '', type = 'l')
plot(seq(2007, 2016, by = 1)), 100*cumprod(1 + sp500/100), ylab = '', type = 'l')
plot(seq(2007, 2016, by = 1), 100*cumprod(1 + sp500/100), ylab = '', type = 'l')
plot(seq(2007, 2016, by = 1), 100*cumprod(1 + sp500/100), ylab = '', type = 'b')
points(seq(0, 9), 100*cumprod(1 + hedge/100), col = 'red', type = 'b')
points(seq(2007, 2016, by = 1), 100*cumprod(1 + hedge/100), col = 'red', type = 'b')
plot(seq(2007, 2016, by = 1), 100*cumprod(1 + sp500/100), ylab = '', type = 'b')
points(seq(2007, 2016, by = 1), 100*cumprod(1 + hedge/100), col = 'red', type = 'b')
plot(seq(2007, 2016, by = 1), 100*cumprod(1 + sp500/100), ylab = '', xlab = '', type = 'b')
points(seq(2007, 2016, by = 1), 100*cumprod(1 + hedge/100), col = 'red', type = 'b')
legend('bottomright', col = c(1, 2), lty = c('b', 'b'), legend = c('S&P500', 'B. HF Index'))
legend('bottomright', col = c(1, 2), lty = c(1, 1), legend = c('S&P500', 'B. HF Index'))
legend('bottomright', col = c(1, 2), lty = c(2, 2), legend = c('S&P500', 'B. HF Index'))
legend('bottomright', col = c(1, 2), lty = c(3, 2), legend = c('S&P500', 'B. HF Index'))
legend('bottomright', col = c(1, 2), lty = c(4, 2), legend = c('S&P500', 'B. HF Index'))
legend('bottomright', col = c(1, 2), lty = c(5, 2), legend = c('S&P500', 'B. HF Index'))
^plot
?plot
?legend
plot(seq(2007, 2016, by = 1), 100*cumprod(1 + sp500/100), ylab = '', xlab = '', type = 'b')
points(seq(2007, 2016, by = 1), 100*cumprod(1 + hedge/100), col = 'red', type = 'b')
legend('bottomright', col = c(1, 2), lty = c(1, 1), legend = c('S&P500', 'B. HF Index'))
install.packages(c("digest", "gargle", "pkgbuild", "usethis"))
qnorm
qnorm(0.98)
library(copula)
install.packages('copula')
sqrt(0.975)
punif(5, 0, 10)
punif(5, 0, 10)*0.0125
install.packages(c("downlit", "jsonlite", "polspline"))
update.packages(ask='graphics',checkBuilt=TRUE)
q()
multinom
library(rmnorm)
library(glm)
library(VGAM)
install.packages('VGAM')
stats::rmultinom(1000, 200, c(0.1, 0.3, 0.6))
stats::rmultinom(1000, 2, c(0.1, 0.3, 0.6))
hist(stats::rmultinom(1000, 2, c(0.1, 0.3, 0.6)))
hist(stats::rmultinom(1000, 2, c(0.1, 0.3, 0.6)), freq = FALSE)
# Esercizio 2
dim(stats::rmultinom(1000, 2, c(0.1, 0.3, 0.6)))
# Esercizio 2
dim(stats::rmultinom(1000, 1, c(0.1, 0.3, 0.6)))
data <- stats::rmultinom(1000, 1, c(0.1, 0.3, 0.6))
data [, 1]
data [, 2]
data [, 3]
data <- stats::rmultinom(1000, 2, c(0.1, 0.3, 0.6))
data [, 1]
data [, 2]
data [, 3]
source("C:/Users/iadev/Il mio Drive/Documenti/Python, R e ML/R/Esercizi Unicredit.R")
# Esercizio 2
p <- 0.7
source("C:/Users/iadev/Il mio Drive/Documenti/Python, R e ML/R/Esercizi Unicredit.R")
source("C:/Users/iadev/Il mio Drive/Documenti/Python, R e ML/R/Esercizi Unicredit.R")
# Esercizio 2
p <- 0.7
q <- 1- p
data <- stats::rmultinom(1000, 1, c(p^2, p*q, q^2))
source("C:/Users/iadev/Il mio Drive/Documenti/Python, R e ML/R/Esercizi Unicredit.R")
# Esercizio 2
p <- 0.7
q <- 1- p
data <- stats::rmultinom(1000, 1, c(p^2, p*q, q^2))
data
p^2
p*q
q^2
source("C:/Users/iadev/Il mio Drive/Documenti/Python, R e ML/R/Esercizi Unicredit.R")
# Esercizio 2
p <- 0.7
q <- 1 - p
data <- stats::rmultinom(1000, 1, c(p^2, p*q, p*q, q^2))
apply(data, 1, sum)
source("C:/Users/iadev/Il mio Drive/Documenti/Python, R e ML/R/Esercizi Unicredit.R")
source("C:/Users/iadev/Il mio Drive/Documenti/Python, R e ML/R/Esercizi Unicredit.R")
source("C:/Users/iadev/Il mio Drive/Documenti/Python, R e ML/R/Esercizi Unicredit.R")
source("C:/Users/iadev/Il mio Drive/Documenti/Python, R e ML/R/Esercizi Unicredit.R")
apply(data, 1, sum)/1000
source("C:/Users/iadev/Il mio Drive/Documenti/Python, R e ML/R/Esercizi Unicredit.R")
# Esercizio 2
p <- 0.7
q <- 1 - p
N <- 5000
data <- stats::rmultinom(N, 1, c(p^2, p*q, p*q, q^2)) # Ogni colonna rappresenta l'esito di una coppia di lanci
apply(data, 1, sum)/N
source("C:/Users/iadev/Il mio Drive/Documenti/Python, R e ML/R/Esercizi Unicredit.R")
apply(data, 1, sum)/N
# Esercizio 2
p <- 0.7
q <- 1 - p
N <- 5000
data <- stats::rmultinom(N, 1, c(p^2, p*q, p*q, q^2)) # Ogni colonna rappresenta l'esito di una coppia di lanci
apply(data, 1, sum)/N
which.max(data[, 1])
which.max(data[, 2])
which.max(data[, 3])
data[, 1:3]
apply(data, 2, function(x) ifelse(which.max(x) == 2, 0, 1))
apply(data, 2, function(x) ifelse(which.max(x) == 2, 1, 0))
headtails <- apply(data, 2, function(x) ifelse(which.max(x) == 2, 1, 0))
headtails
headtail <- apply(data, 2, function(x) ifelse(which.max(x) == 2, 1, 0))
tailhead <- apply(data, 2, function(x) ifelse(which.max(x) == 3, 1, 0))
headtail <- apply(data, 2, function(x) ifelse(which.max(x) == 2, 1, 0))
tailhead <- apply(data, 2, function(x) ifelse(which.max(x) == 3, 1, 0))
cbind(headtail, tailhead)
cbind(headtail, tailhead)
which(data[, 1] == 1)
which(data[, 2] == 1)
# Selezione esiti incrociati
# Rimozione doppi esiti
HHTT <- apply(data, 2, function(x) ifelse(which(x == 1) %in% c(1, 4), 1, 0))
HHTT
HHTT
data[, -which(HHTT == 1)]
# Selezione esiti incrociati
# Rimozione doppi esiti
HHTT <- apply(data, 2, function(x) ifelse(which(x == 1) %in% c(1, 4), 1, 0))
data[, -which(HHTT == 1)]
data
which(HHTT == 1)
HTTH <- data[, -which(HHTT == 1)]
HTTH
HTTH <- data[2:3, -which(HHTT == 1)]
# Esercizio 2
p <- 0.7
q <- 1 - p
N <- 5000
data <- stats::rmultinom(N, 1, c(p^2, p*q, p*q, q^2)) # Ogni colonna rappresenta l'esito di una coppia di lanci
apply(data, 1, sum)/N
# Selezione esiti incrociati
# Rimozione doppi esiti
HHTT <- apply(data, 2, function(x) ifelse(which(x == 1) %in% c(1, 4), 1, 0))
HTTH <- data[2:3, -which(HHTT == 1)]
HTTH
HTTH <- t(data[2:3, -which(HHTT == 1)])
HTTH
mean(HTTH[, 1])
hist(HTTH)
hist(HTTH[, 1])
prob_head <- mean(HTTH[, 1])
prob_head <- mean(HTTH[, 1])
prob_tail <- mean(HTTH[, 2])
prob_head
prob_tail
HTTH
sd(HTTH[, 1])
test <- (prob_head - 0.5)/sd(HTTH[, 1])
test
2*pnorm(test, 0, 1)
test <- (prob_head - 0.5)/sqrt(prob_head*prob_tail/(NROW(HTTH) - 1))
test
prob_head
prob_tail
test
pnorm(test, 0, 1)
?pnorm
2*pnorm(test, 0, 1, lower.tail = FALSE)
pnorm(test, 0, 1, lower.tail = FALSE)
test <- (0.75 - 0.5)/sqrt(0.75*0.25/(NROW(HTTH) - 1))
2*pnorm(test, 0, 1, lower.tail = FALSE)  # Non si rifiuta l'ipotesi nulla
# Quanti lanci abbiamo buttato via?
nrow(HHTT) - nrow()
# Lanci salvati
nrow(HTTH)
# Quanti lanci abbiamo buttato via?
nrow(HHTT)
HHTT
# Quanti lanci abbiamo buttato via?
nrow(HHTT)
HHTT
# Esercizio 2
p <- 0.7
q <- 1 - p
N <- 5000
data <- stats::rmultinom(N, 1, c(p^2, p*q, p*q, q^2)) # Ogni colonna rappresenta l'esito di una coppia di lanci
apply(data, 1, sum)/N
# Rimozione doppi esiti e selezione esiti incrociati
HHTT_idx <- apply(data, 2, function(x) ifelse(which(x == 1) %in% c(1, 4), 1, 0))
HTTH <- t(data[2:3, -which(HHTT_idx == 1)]) # Campione estratto dalla moneta fair
prob_head <- mean(HTTH[, 1])
prob_tail <- mean(HTTH[, 2])
test <- (prob_head - 0.5)/sqrt(prob_head*prob_tail/(NROW(HTTH) - 1))
2*pnorm(test, 0, 1, lower.tail = FALSE)  # Non si rifiuta l'ipotesi nulla
# Lanci salvati
nrow(HTTH)
# Quanti lanci abbiamo buttato via?
nrow(HHTT)
HHTT_idx
# Esercizio 2
p <- 0.7
q <- 1 - p
N <- 5000
data <- stats::rmultinom(N, 1, c(p^2, p*q, p*q, q^2)) # Ogni colonna rappresenta l'esito di una coppia di lanci
apply(data, 1, sum)/N
# Rimozione doppi esiti e selezione esiti incrociati
HHTT <- apply(data, 2, function(x) ifelse(which(x == 1) %in% c(1, 4), 1, 0))
HTTH <- t(data[2:3, -which(HHTT == 1)]) # Campione estratto dalla moneta fair
prob_head <- mean(HTTH[, 1])
prob_tail <- mean(HTTH[, 2])
test <- (prob_head - 0.5)/sqrt(prob_head*prob_tail/(NROW(HTTH) - 1))
2*pnorm(test, 0, 1, lower.tail = FALSE)  # Non si rifiuta l'ipotesi nulla
# Lanci salvati
nrow(HTTH)
# Quanti lanci abbiamo buttato via?
nrow(data) -  nrow(HTTH)
# Lanci salvati
nrow(HTTH)
# Quanti lanci abbiamo buttato via?
nrow(data) -  nrow(HTTH)
# Quanti lanci abbiamo buttato via?
ncol(data) -  nrow(HTTH)
# Esercizio 2
p <- 0.9
q <- 1 - p
N <- 5000
data <- stats::rmultinom(N, 1, c(p^2, p*q, p*q, q^2)) # Ogni colonna rappresenta l'esito di una coppia di lanci
apply(data, 1, sum)/N
# Rimozione doppi esiti e selezione esiti incrociati
HHTT <- apply(data, 2, function(x) ifelse(which(x == 1) %in% c(1, 4), 1, 0))
HTTH <- t(data[2:3, -which(HHTT == 1)]) # Campione estratto dalla moneta fair
prob_head <- mean(HTTH[, 1])
prob_tail <- mean(HTTH[, 2])
test <- (prob_head - 0.5)/sqrt(prob_head*prob_tail/(NROW(HTTH) - 1))
2*pnorm(test, 0, 1, lower.tail = FALSE)  # Non si rifiuta l'ipotesi nulla
# Lanci salvati
nrow(HTTH)
# Quanti lanci abbiamo buttato via?
ncol(data) -  nrow(HTTH)
# Esercizio 3
x <- seq(-4, 4, length = 1000)
pnorm(x, 2, 3)
curve(pnorm(x, 2, 3))
curve(pnorm(x, 0, 1))
pnorm(x, 0, 1)
?curve
curve(function(x) pnorm(x, 0, 1))
curve(function(x) pnorm(x, 0, 1), from = -2, to = 2)
curve(function(y) pnorm(y, 0, 1), from = -2, to = 2)
^pnorm
ppnorm
?pnorm
curve(function(y) pnorm(y, mean = 0, sd = 1), from = -2, to = 2)
curve(pnorm(y, mean = 0, sd = 1), from = -2, to = 2)
curve(pnorm(x, mean = 0, sd = 1), from = -2, to = 2)
curve(pnorm(x, mean = 0, sd = 1), from = -3, to = 3)
curve(pnorm(x, mean = 0, sd = 1), from = -3, to = 3)
curve(pnorm(x, mean = 0, sd = 1), from = -4, to = 4)
curve(dnorm(x, mean = 0, sd = 1), from = -4, to = 4)
curve(pnorm(x, mean = 3, sd = 2), from = -4, to = 4)
curve(pnorm(x, mean = 3, sd = 2), from = -2, to = 7)
curve(pnorm(x, mean = 3, sd = 2), from = -2, to = 9)
curve(dnorm(x, mean = 3, sd = 2), from = -2, to = 9)
# Esercizio 3
x <- seq(-4, 9, length = 1000)
curve(pnorm(x, mean = 3, sd = 2), from = -4, to = 9)
curve(dnorm(x, mean = 3, sd = 2), from = -4, to = 9)
curve(pnorm(x, mean = 3, sd = 2), from = -4, to = 9)
# Esercizio 3
x <- seq(-4, 9, length = 1000)
curve(pnorm(x, mean = 3, sd = 2), from = -4, to = 9)
cdf <- pnorm(x, 3, 2)
cdf
cdf[2:length(cdf)] - cdf[1:(length(cdf) - 1)]
prob_qe <- cdf[2:length(cdf)] - cdf[1:(length(cdf) - 1)]
prob_qe
hist(prob_qe)
which.max(prob_qe)
x[which.max(prob_qe) + 1]
library(RcppArmadillo)
library(Rcpp)
library(numDeriv)
sourceCpp('SAVLoop.cpp')
sourceCpp('AsymmetricLoop.cpp')
setwd("~/GitHub/CaViAR-R")
library(RcppArmadillo)
library(Rcpp)
library(numDeriv)
sourceCpp('SAVLoop.cpp')
sourceCpp('AsymmetricLoop.cpp')
sourceCpp('AdaptiveLoop.cpp')
sourceCpp('InGARCHLoop.cpp')
sourceCpp('QRObj.cpp')
